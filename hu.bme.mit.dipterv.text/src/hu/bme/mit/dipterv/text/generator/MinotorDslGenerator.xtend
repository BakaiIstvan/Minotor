/*
 * generated by Xtext 2.24.0
 */
package hu.bme.mit.dipterv.text.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject
import hu.bme.mit.dipterv.text.minotorDsl.Domain
import hu.bme.mit.dipterv.text.minotorDsl.Type
import hu.bme.mit.dipterv.text.minotorDsl.Message
import hu.bme.mit.dipterv.text.minotorDsl.LogicalExpression
import hu.bme.mit.dipterv.text.minotorDsl.AndExpression
import hu.bme.mit.dipterv.text.minotorDsl.EqualsExpression
import hu.bme.mit.dipterv.text.minotorDsl.LesserThanExpression
import hu.bme.mit.dipterv.text.minotorDsl.NotLogicalExpression
import hu.bme.mit.dipterv.text.minotorDsl.EqualsBooleanExpression
import hu.bme.mit.dipterv.text.minotorDsl.OrExpression
import hu.bme.mit.dipterv.text.minotorDsl.GreaterThanExpression

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MinotorDslGenerator extends AbstractGenerator {
	@Inject extension IQualifiedNameProvider
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for(s : resource.allContents.toIterable.filter(Domain)){
			fsa.generateFile("Specification.java", s.compile)
		}
	}
	
	def compile(Domain s) '''
		package generated;
	
		import java.io.FileNotFoundException;
		import java.io.PrintWriter;
		import java.io.UnsupportedEncodingException;
		import java.util.ArrayList;
		import java.util.HashMap;
		import java.util.Collections;
		import java.util.Comparator;
		import java.util.Arrays;
		import java.util.List;
		import java.util.Map;
		import java.util.Set;
		import java.util.TreeSet;
		
		import util.Automaton;
		import util.State;
		import util.StateType;
		import util.Transition;
		import util.NeverClaimWriter;
		import util.OperatorFunctions;
		
		public class Specification{
			private String id = "«s.name»";
			private ArrayList<Automaton> automatas;
			
			public Specification(){
				automatas = new ArrayList<Automaton>();
				String str;
				String str1;
				String pre;
				String succ;
				State actualState;
				State acceptState;
				State finalState;
				State newState;
				State acceptState_new;
				OperatorFunctions opFunctions = new OperatorFunctions();
				«FOR scenario:s.scenarios»
					Automaton a = new Automaton("«scenario.name»");
					Automaton b;
					Map<String, Automaton> altauto;
					ArrayList<Automaton> parauto;
					Automaton loopauto;
					Automaton expression;
					int counter = 0;
					
					«FOR sc : scenario.scenariocontents»
						«FOR l :sc.loop»
							loopauto = new Automaton("loopauto" + counter);
							«FOR m : l.messages»
								«IF m.past || m.future»
									«compile_constraint_msg(m)»
								«ENDIF»
								«IF !m.strict»
									«IF m.required»
										«IF m.future»
											«IF m.clockconstraint || m.resetclock !== null»
												«new ClockRequiredMessage().compile_required_future_clock(m)»
											«ELSE»
												«new RequiredMessage().compile_required_future(m)»
											«ENDIF»
											loopauto.collapse(b);
										«ENDIF»
										«IF m.past»
											«IF m.clockconstraint || m.resetclock !== null»
												«new ClockRequiredMessage().compile_required_past_clock(m)»
											«ELSE»
												«new RequiredMessage().compile_required_past(m)»
											«ENDIF»
											loopauto.collapse(b);
										«ENDIF»
										«IF !m.past && !m.future»
											«IF m.clockconstraint || m.resetclock !== null»
												«new ClockRequiredMessage().compile_required_clock(m)»
											«ELSE»
												«new RequiredMessage().compile_required(m)»
											«ENDIF»
											loopauto.collapse(b);
										«ENDIF»
									«ENDIF»
									«IF m.fail»
										«IF m.past»
											«new FailMessage().compile_fail_past(m)»
											loopauto.collapse(b);
										«ENDIF»
										«IF !m.past && !m.future»
											«new FailMessage().compile_fail(m)»
											loopauto.collapse(b);
										«ENDIF»
									«ENDIF»
									«IF !m.fail && !m.required»
										«IF m.future»
											«IF m.clockconstraint || m.resetclock !== null»
												«new ClockRegularMessage().compile_future_clock(m)»
											«ELSE»
												«new RegularMessage().compile_future(m)»
											«ENDIF»
											loopauto.collapse(b);
										«ENDIF»
										«IF m.past»
											«IF m.clockconstraint || m.resetclock !== null»
												«new ClockRegularMessage().compile_past_clock(m)»
											«ELSE»
												«new RegularMessage().compile_past(m)»
											«ENDIF»
											loopauto.collapse(b);
										«ENDIF»
										«IF !m.past && !m.future»
											«IF m.clockconstraint || m.resetclock !== null»
												«new ClockRegularMessage().compile_msg_clock(m)»
											«ELSE»
												«new RegularMessage().compile_msg(m)»
											«ENDIF»
											loopauto.collapse(b);
										«ENDIF»
									«ENDIF»
								«ENDIF»
								
								«IF m.strict»
									«IF m.required»
										«IF m.future»
											«IF m.clockconstraint || m.resetclock !== null»
												«new ClockRequiredMessage().compile_strict_required_future_clock(m)»
											«ELSE»
												«new RequiredMessage().compile_strict_required_future(m)»
											«ENDIF»
											loopauto.collapse(b);
										«ENDIF»
										«IF !m.past && !m.future»
											«IF m.clockconstraint || m.resetclock !== null»
												«new ClockRequiredMessage().compile_strict_required_clock(m)»
											«ELSE»
												«new RequiredMessage().compile_strict_required(m)»
											«ENDIF»
											loopauto.collapse(b);
										«ENDIF»
									«ENDIF»
									«IF m.fail»
										«IF !m.past && !m.future»
											«new FailMessage().compile_strict_fail(m)»
											loopauto.collapse(b);
										«ENDIF»
									«ENDIF»
									«IF !m.fail && !m.required»
										«IF m.future»
											«IF m.clockconstraint || m.resetclock !== null»
												«new ClockRegularMessage().compile_future_strict_clock(m)»
											«ELSE»
												«new RegularMessage().compile_strict_future(m)»
											«ENDIF»
											loopauto.collapse(b);
										«ENDIF»
										«IF !m.past && !m.future»
											«IF m.clockconstraint || m.resetclock !== null»
												«new ClockRegularMessage().compile_strict_clock(m)»
											«ELSE»
												«new RegularMessage().compile_strict(m)»
											«ENDIF»
											loopauto.collapse(b);
										«ENDIF» 
									«ENDIF»
								«ENDIF»
							«ENDFOR»
							a.merge(opFunctions.loopSetup(loopauto, «l.min», «l.max»));
						«ENDFOR»
						«FOR p : sc.par»
							parauto = new ArrayList<Automaton>();
							«FOR pe : p.parexpression»
								expression = new Automaton("expauto" + counter);
								«FOR m : pe.messages»
									«IF m.past || m.future»
										«compile_constraint_msg(m)»
									«ENDIF»
									«IF !m.strict»
										«IF m.required»
											«IF m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRequiredMessage().compile_required_future_clock(m)»
												«ELSE»
													«new RequiredMessage().compile_required_future(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
											«IF m.past»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRequiredMessage().compile_required_past_clock(m)»
												«ELSE»
													«new RequiredMessage().compile_required_past(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRequiredMessage().compile_required_clock(m)»
												«ELSE»
													«new RequiredMessage().compile_required(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF m.fail»
											«IF m.past»
												«new FailMessage().compile_fail_past(m)»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«new FailMessage().compile_fail(m)»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF !m.fail && !m.required»
											«IF m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRegularMessage().compile_future_clock(m)»
												«ELSE»
													«new RegularMessage().compile_future(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
											«IF m.past»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRegularMessage().compile_past_clock(m)»
												«ELSE»
													«new RegularMessage().compile_past(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRegularMessage().compile_msg_clock(m)»
												«ELSE»
													«new RegularMessage().compile_msg(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
									«ENDIF»
									
									«IF m.strict»
										«IF m.required»
											«IF m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRequiredMessage().compile_strict_required_future_clock(m)»
												«ELSE»
													«new RequiredMessage().compile_strict_required_future(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRequiredMessage().compile_strict_required_clock(m)»
												«ELSE»
													«new RequiredMessage().compile_strict_required(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF m.fail»
											«IF !m.past && !m.future»
												«new FailMessage().compile_strict_fail(m)»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF !m.fail && !m.required»
											«IF m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRegularMessage().compile_future_strict_clock(m)»
												«ELSE»
													«new RegularMessage().compile_strict_future(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRegularMessage().compile_strict_clock(m)»
												«ELSE»
													«new RegularMessage().compile_strict(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF» 
										«ENDIF»
									«ENDIF»
								«ENDFOR»
								parauto.add(expression);			
							«ENDFOR»
							a.merge(opFunctions.par(parauto));
						«ENDFOR»
						«FOR a : sc.alt»
						altauto = new HashMap<String, Automaton>();
							«FOR e : a.expressions»
								expression = new Automaton("expauto" + counter);
								«FOR m : e.messages»
									«IF m.past || m.future»
										«compile_constraint_msg(m)»
									«ENDIF»
									«IF !m.strict»
										«IF m.required»
											«IF m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRequiredMessage().compile_required_future_clock(m)»
												«ELSE»
													«new RequiredMessage().compile_required_future(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
											«IF m.past»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRequiredMessage().compile_required_past_clock(m)»
												«ELSE»
													«new RequiredMessage().compile_required_past(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRequiredMessage().compile_required_clock(m)»
												«ELSE»
													«new RequiredMessage().compile_required(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF m.fail»
											«IF m.past»
												«new FailMessage().compile_fail_past(m)»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«new FailMessage().compile_fail(m)»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF !m.fail && !m.required»
											«IF m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRegularMessage().compile_future_clock(m)»
												«ELSE»
													«new RegularMessage().compile_future(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
											«IF m.past»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRegularMessage().compile_past_clock(m)»
												«ELSE»
													«new RegularMessage().compile_past(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRegularMessage().compile_msg_clock(m)»
												«ELSE»
													«new RegularMessage().compile_msg(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
									«ENDIF»
									
									«IF m.strict»
										«IF m.required»
											«IF m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRequiredMessage().compile_strict_required_future_clock(m)»
												«ELSE»
													«new RequiredMessage().compile_strict_required_future(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRequiredMessage().compile_strict_required_clock(m)»
												«ELSE»
													«new RequiredMessage().compile_strict_required(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF m.fail»
											«IF !m.past && !m.future»
												«new FailMessage().compile_strict_fail(m)»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF !m.fail && !m.required»
											«IF m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRegularMessage().compile_future_strict_clock(m)»
												«ELSE»
													«new RegularMessage().compile_strict_future(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«IF m.clockconstraint || m.resetclock !== null»
													«new ClockRegularMessage().compile_strict_clock(m)»
												«ELSE»
													«new RegularMessage().compile_strict(m)»
												«ENDIF»
												expression.collapse(b);
											«ENDIF» 
										«ENDIF»
									«ENDIF»
								«ENDFOR»
								altauto.put("«compile_alt_condition(e.altCondition)»", expression);
							«ENDFOR»
							a.merge(altauto);
						«ENDFOR»
						«FOR m : sc.message»
							«IF m.past || m.future»
								«compile_constraint_msg(m)»
							«ENDIF»
							«IF !m.strict»
								«IF m.required»
									«IF m.future»
										«IF m.clockconstraint || m.resetclock !== null»
											«new ClockRequiredMessage().compile_required_future_clock(m)»
										«ELSE»
											«new RequiredMessage().compile_required_future(m)»
										«ENDIF»
										a.collapse(b);
									«ENDIF»
									«IF m.past»
										«IF m.clockconstraint || m.resetclock !== null»
											«new ClockRequiredMessage().compile_required_past_clock(m)»
										«ELSE»
											«new RequiredMessage().compile_required_past(m)»
										«ENDIF»
										a.collapse(b);
									«ENDIF»
									«IF !m.past && !m.future»
										«IF m.clockconstraint || m.resetclock !== null»
											«new ClockRequiredMessage().compile_required_clock(m)»
										«ELSE»
											«new RequiredMessage().compile_required(m)»
										«ENDIF»
										a.collapse(b);
									«ENDIF»
								«ENDIF»
								«IF m.fail»
									«IF m.past»
										«new FailMessage().compile_fail_past(m)»
										a.collapse(b);
									«ENDIF»
									«IF !m.past && !m.future»
										«new FailMessage().compile_fail(m)»
										a.collapse(b);
									«ENDIF»
								«ENDIF»
								«IF !m.fail && !m.required»
									«IF m.future»
										«IF m.clockconstraint || m.resetclock !== null»
											«new ClockRegularMessage().compile_future_clock(m)»
										«ELSE»
											«new RegularMessage().compile_future(m)»
										«ENDIF»
										a.collapse(b);
									«ENDIF»
									«IF m.past»
										«IF m.clockconstraint || m.resetclock !== null»
											«new ClockRegularMessage().compile_past_clock(m)»
										«ELSE»
											«new RegularMessage().compile_past(m)»
										«ENDIF»
										a.collapse(b);
									«ENDIF»
									«IF !m.past && !m.future»
										«IF m.resetinconstraint !== null»
											msg reset clock is set
										«ENDIF»
										«IF m.clockconstraint || m.resetclock !== null»
											«new ClockRegularMessage().compile_msg_clock(m)»
										«ELSE»
											«new RegularMessage().compile_msg(m)»
										«ENDIF»
										a.collapse(b);
									«ENDIF»
								«ENDIF»
							«ENDIF»
							
							«IF m.strict»
								«IF m.required»
									«IF m.future»
										«IF m.clockconstraint || m.resetclock !== null»
											«new ClockRequiredMessage().compile_strict_required_future_clock(m)»
										«ELSE»
											«new RequiredMessage().compile_strict_required_future(m)»
										«ENDIF»
										a.collapse(b);
									«ENDIF»
									«IF !m.past && !m.future»
										«IF m.clockconstraint || m.resetclock !== null»
											«new ClockRequiredMessage().compile_strict_required_clock(m)»
										«ELSE»
											«new RequiredMessage().compile_strict_required(m)»
										«ENDIF»
										a.collapse(b);
									«ENDIF»
								«ENDIF»
								«IF m.fail»
									«IF !m.past && !m.future»
										«new FailMessage().compile_strict_fail(m)»
										a.collapse(b);
									«ENDIF»
								«ENDIF»
								«IF !m.fail && !m.required»
									«IF m.future»
										«IF m.clockconstraint || m.resetclock !== null»
											«new ClockRegularMessage().compile_future_strict_clock(m)»							
										«ELSE»
											«new RegularMessage().compile_strict_future(m)»
										«ENDIF»
										a.collapse(b);
									«ENDIF»
									«IF !m.past && !m.future»
										«IF m.clockconstraint || m.resetclock !== null»
											«new ClockRegularMessage().compile_strict_clock(m)»							
										«ELSE»
											«new RegularMessage().compile_strict(m)»
										«ENDIF»
										a.collapse(b);
									«ENDIF» 
								«ENDIF»
							«ENDIF»
						«ENDFOR»
					«ENDFOR»
					a.rename();
					automatas.add(a);
				«ENDFOR»
			}
			
			public void listAutomatas(){
				for(Automaton a : this.automatas){
					for(State s : a.getStates()){
						s.writeState();	
					}
					
					for(Transition t : a.getTransitions()){
						t.writeTransition();
					}
				}
			}

			public List<Automaton> getAutomata() {
				return automatas;
			}

			public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
				Specification specification = new Specification();
				specification.listAutomatas();
				
				NeverClaimWriter ncWriter = new NeverClaimWriter();
				ncWriter.writeNeverClaim("«s.name»", specification.automatas);
				
				«new UppaalWriter().compile_uppaal_writer(s)»
			}
		}
	'''
	
	def compile_constraint_msg(Message m)'''
		str = "" 
		«FOR msg : m.c.messages»
			+ "!(" + "«msg.sender.name»" + "." +
			"«msg.name»" + "("
			«FOR p: msg.params»
				«FOR param: 0..<p.params.size»
					+
					«IF p.params.get(param).value.value.startsWith("\"")»
						«p.params.get(param).value.value»
					«ELSE»
					"«p.params.get(param).value.value»"
					«ENDIF»
					«IF param != p.params.size - 1»
						+ ", "
					«ENDIF»
				«ENDFOR»
			«ENDFOR»
			«FOR p: msg.constantparams»
				«FOR param: 0..<p.values.size»
					+
					«IF p.values.get(param).value.startsWith("\"")»
						«p.values.get(param).value»
					«ELSE»
					"«p.values.get(param).value»"
					«ENDIF»
					«IF param != p.values.size - 1»
						+ ", "
					«ENDIF»
				«ENDFOR»
			«ENDFOR»
			+ ")"
			+ "." + "«msg.receiver.name»)" + " & "
		«ENDFOR»;
		str= str.substring(0, str.length() - 3);
		
		«IF m.constraintexp !== null»
			str+= "; " +
			«IF m.constraintexp.rclockconstraint === null»
				«IF m.constraintexp.not»
					"!" + 
				«ENDIF»
				«IF m.constraintexp.lclockconstraint.op.greater»
					"«m.constraintexp.lclockconstraint.clock.name» > «m.constraintexp.lclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.lclockconstraint.op.smaller»
				 	 "«m.constraintexp.lclockconstraint.clock.name» < «m.constraintexp.lclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.lclockconstraint.op.greaterequals»
					 "«m.constraintexp.lclockconstraint.clock.name» >= «m.constraintexp.lclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.lclockconstraint.op.smallerequals»
					"«m.constraintexp.lclockconstraint.clock.name» <= «m.constraintexp.lclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.lclockconstraint.op.equals»
					"«m.constraintexp.lclockconstraint.clock.name» == «m.constraintexp.lclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.lclockconstraint.op.notequals»
					"«m.constraintexp.lclockconstraint.clock.name» != «m.constraintexp.lclockconstraint.constant»"
				«ENDIF»
			«ELSE»
				«IF m.constraintexp.lclockconstraint.op.greater»
					"«m.constraintexp.lclockconstraint.clock.name» > «m.constraintexp.lclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.lclockconstraint.op.smaller»
				 	 "«m.constraintexp.lclockconstraint.clock.name» < «m.constraintexp.lclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.lclockconstraint.op.greaterequals»
					 "«m.constraintexp.lclockconstraint.clock.name» >= «m.constraintexp.lclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.lclockconstraint.op.smallerequals»
					"«m.constraintexp.lclockconstraint.clock.name» <= «m.constraintexp.lclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.lclockconstraint.op.equals»
					"«m.constraintexp.lclockconstraint.clock.name» == «m.constraintexp.lclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.lclockconstraint.op.notequals»
					"«m.constraintexp.lclockconstraint.clock.name» != «m.constraintexp.lclockconstraint.constant»"
				«ENDIF»
				
				+ " & " + 
				
				«IF m.constraintexp.rclockconstraint.op.greater»
					"«m.constraintexp.rclockconstraint.clock.name» > «m.constraintexp.rclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.rclockconstraint.op.smaller»
				 	 "«m.constraintexp.rclockconstraint.clock.name» < «m.constraintexp.rclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.rclockconstraint.op.greaterequals»
					 "«m.constraintexp.rclockconstraint.clock.name» >= «m.constraintexp.rclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.rclockconstraint.op.smallerequals»
					"«m.constraintexp.rclockconstraint.clock.name» <= «m.constraintexp.rclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.rclockconstraint.op.equals»
					"«m.constraintexp.rclockconstraint.clock.name» == «m.constraintexp.rclockconstraint.constant»"
				«ENDIF»
				«IF m.constraintexp.rclockconstraint.op.notequals»
					"«m.constraintexp.rclockconstraint.clock.name» != «m.constraintexp.rclockconstraint.constant»"
				«ENDIF»
			«ENDIF»
			
			«IF m.resetinconstraint !== null»
				+ "; «m.resetinconstraint.clock.name» = 0"
			«ENDIF»
			;
		«ENDIF»
	'''
	
	def compile_alt_condition(LogicalExpression a)
	'''«a.generateLogicalExpression»'''
	def dispatch generateLogicalExpression(AndExpression expression)
	'''(«expression.lhs») && («expression.rhs»)'''
	
	def dispatch generateLogicalExpression(OrExpression expression)
	'''(«expression.lhs») || («expression.rhs»)'''
	
	def dispatch generateLogicalExpression(EqualsExpression expression) 
	'''«expression.lhs.name» == «expression.rhs»'''
	
	def dispatch generateLogicalExpression(EqualsBooleanExpression expression) 
	'''«expression.lhs.name» == «expression.rhs»'''
	
	def dispatch generateLogicalExpression(GreaterThanExpression expression)
	'''«expression.lhs.name» > «expression.rhs»'''
	
	def dispatch generateLogicalExpression(LesserThanExpression expression)
	'''«expression.lhs.name» < «expression.rhs»'''
	
	def dispatch generateLogicalExpression(NotLogicalExpression expression)
	'''!(«expression.operand»)'''
}
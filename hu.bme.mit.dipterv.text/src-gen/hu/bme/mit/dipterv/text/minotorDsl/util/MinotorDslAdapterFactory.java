/**
 * generated by Xtext 2.24.0
 */
package hu.bme.mit.dipterv.text.minotorDsl.util;

import hu.bme.mit.dipterv.text.minotorDsl.Alt;
import hu.bme.mit.dipterv.text.minotorDsl.AndExpression;
import hu.bme.mit.dipterv.text.minotorDsl.AppearMessage;
import hu.bme.mit.dipterv.text.minotorDsl.AssertionEntity;
import hu.bme.mit.dipterv.text.minotorDsl.AssertionRelation;
import hu.bme.mit.dipterv.text.minotorDsl.Attribute;
import hu.bme.mit.dipterv.text.minotorDsl.AttributeValue;
import hu.bme.mit.dipterv.text.minotorDsl.BinaryLogicalExpression;
import hu.bme.mit.dipterv.text.minotorDsl.ChangeMessage;
import hu.bme.mit.dipterv.text.minotorDsl.ChangeToMessage;
import hu.bme.mit.dipterv.text.minotorDsl.ChangeToRelation;
import hu.bme.mit.dipterv.text.minotorDsl.Clock;
import hu.bme.mit.dipterv.text.minotorDsl.ClockConstraint;
import hu.bme.mit.dipterv.text.minotorDsl.ClockConstraintExpression;
import hu.bme.mit.dipterv.text.minotorDsl.ConstantParams;
import hu.bme.mit.dipterv.text.minotorDsl.Constraint;
import hu.bme.mit.dipterv.text.minotorDsl.ContextFragment;
import hu.bme.mit.dipterv.text.minotorDsl.ContextMessage;
import hu.bme.mit.dipterv.text.minotorDsl.ContextMessageContent;
import hu.bme.mit.dipterv.text.minotorDsl.ContextModel;
import hu.bme.mit.dipterv.text.minotorDsl.DisappearMessage;
import hu.bme.mit.dipterv.text.minotorDsl.Domain;
import hu.bme.mit.dipterv.text.minotorDsl.Entity;
import hu.bme.mit.dipterv.text.minotorDsl.EqualsBooleanExpression;
import hu.bme.mit.dipterv.text.minotorDsl.EqualsExpression;
import hu.bme.mit.dipterv.text.minotorDsl.Expression;
import hu.bme.mit.dipterv.text.minotorDsl.FEntity;
import hu.bme.mit.dipterv.text.minotorDsl.FRelation;
import hu.bme.mit.dipterv.text.minotorDsl.FragmentAttribute;
import hu.bme.mit.dipterv.text.minotorDsl.GreaterThanExpression;
import hu.bme.mit.dipterv.text.minotorDsl.Include;
import hu.bme.mit.dipterv.text.minotorDsl.LesserThanExpression;
import hu.bme.mit.dipterv.text.minotorDsl.LogicalExpression;
import hu.bme.mit.dipterv.text.minotorDsl.Loop;
import hu.bme.mit.dipterv.text.minotorDsl.MatchMessage;
import hu.bme.mit.dipterv.text.minotorDsl.Message;
import hu.bme.mit.dipterv.text.minotorDsl.MinotorDslPackage;
import hu.bme.mit.dipterv.text.minotorDsl.NotLogicalExpression;
import hu.bme.mit.dipterv.text.minotorDsl.ObjectType;
import hu.bme.mit.dipterv.text.minotorDsl.Operator;
import hu.bme.mit.dipterv.text.minotorDsl.OrExpression;
import hu.bme.mit.dipterv.text.minotorDsl.Par;
import hu.bme.mit.dipterv.text.minotorDsl.ParExpression;
import hu.bme.mit.dipterv.text.minotorDsl.Parameter;
import hu.bme.mit.dipterv.text.minotorDsl.ParameterConstraint;
import hu.bme.mit.dipterv.text.minotorDsl.Params;
import hu.bme.mit.dipterv.text.minotorDsl.Relation;
import hu.bme.mit.dipterv.text.minotorDsl.ResetClock;
import hu.bme.mit.dipterv.text.minotorDsl.Scenario;
import hu.bme.mit.dipterv.text.minotorDsl.ScenarioContent;
import hu.bme.mit.dipterv.text.minotorDsl.UnaryLogicalExpression;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see hu.bme.mit.dipterv.text.minotorDsl.MinotorDslPackage
 * @generated
 */
public class MinotorDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MinotorDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MinotorDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MinotorDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MinotorDslSwitch<Adapter> modelSwitch =
    new MinotorDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseDomain(Domain object)
      {
        return createDomainAdapter();
      }
      @Override
      public Adapter caseInclude(Include object)
      {
        return createIncludeAdapter();
      }
      @Override
      public Adapter caseContextModel(ContextModel object)
      {
        return createContextModelAdapter();
      }
      @Override
      public Adapter caseContextFragment(ContextFragment object)
      {
        return createContextFragmentAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseAttributeValue(AttributeValue object)
      {
        return createAttributeValueAdapter();
      }
      @Override
      public Adapter caseFragmentAttribute(FragmentAttribute object)
      {
        return createFragmentAttributeAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseFEntity(FEntity object)
      {
        return createFEntityAdapter();
      }
      @Override
      public Adapter caseRelation(Relation object)
      {
        return createRelationAdapter();
      }
      @Override
      public Adapter caseFRelation(FRelation object)
      {
        return createFRelationAdapter();
      }
      @Override
      public Adapter caseScenario(Scenario object)
      {
        return createScenarioAdapter();
      }
      @Override
      public Adapter caseScenarioContent(ScenarioContent object)
      {
        return createScenarioContentAdapter();
      }
      @Override
      public Adapter caseMessage(Message object)
      {
        return createMessageAdapter();
      }
      @Override
      public Adapter caseResetClock(ResetClock object)
      {
        return createResetClockAdapter();
      }
      @Override
      public Adapter caseClockConstraint(ClockConstraint object)
      {
        return createClockConstraintAdapter();
      }
      @Override
      public Adapter caseClockConstraintExpression(ClockConstraintExpression object)
      {
        return createClockConstraintExpressionAdapter();
      }
      @Override
      public Adapter caseContextMessage(ContextMessage object)
      {
        return createContextMessageAdapter();
      }
      @Override
      public Adapter caseContextMessageContent(ContextMessageContent object)
      {
        return createContextMessageContentAdapter();
      }
      @Override
      public Adapter caseMatchMessage(MatchMessage object)
      {
        return createMatchMessageAdapter();
      }
      @Override
      public Adapter caseChangeMessage(ChangeMessage object)
      {
        return createChangeMessageAdapter();
      }
      @Override
      public Adapter caseAppearMessage(AppearMessage object)
      {
        return createAppearMessageAdapter();
      }
      @Override
      public Adapter caseDisappearMessage(DisappearMessage object)
      {
        return createDisappearMessageAdapter();
      }
      @Override
      public Adapter caseChangeToMessage(ChangeToMessage object)
      {
        return createChangeToMessageAdapter();
      }
      @Override
      public Adapter caseChangeToRelation(ChangeToRelation object)
      {
        return createChangeToRelationAdapter();
      }
      @Override
      public Adapter caseAssertionEntity(AssertionEntity object)
      {
        return createAssertionEntityAdapter();
      }
      @Override
      public Adapter caseAssertionRelation(AssertionRelation object)
      {
        return createAssertionRelationAdapter();
      }
      @Override
      public Adapter caseParams(Params object)
      {
        return createParamsAdapter();
      }
      @Override
      public Adapter caseConstantParams(ConstantParams object)
      {
        return createConstantParamsAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseParameterConstraint(ParameterConstraint object)
      {
        return createParameterConstraintAdapter();
      }
      @Override
      public Adapter caseOperator(Operator object)
      {
        return createOperatorAdapter();
      }
      @Override
      public Adapter caseClock(Clock object)
      {
        return createClockAdapter();
      }
      @Override
      public Adapter caseObjectType(ObjectType object)
      {
        return createObjectTypeAdapter();
      }
      @Override
      public Adapter caseObject(hu.bme.mit.dipterv.text.minotorDsl.Object object)
      {
        return createObjectAdapter();
      }
      @Override
      public Adapter caseConstraint(Constraint object)
      {
        return createConstraintAdapter();
      }
      @Override
      public Adapter caseAlt(Alt object)
      {
        return createAltAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseLogicalExpression(LogicalExpression object)
      {
        return createLogicalExpressionAdapter();
      }
      @Override
      public Adapter caseBinaryLogicalExpression(BinaryLogicalExpression object)
      {
        return createBinaryLogicalExpressionAdapter();
      }
      @Override
      public Adapter caseAndExpression(AndExpression object)
      {
        return createAndExpressionAdapter();
      }
      @Override
      public Adapter caseOrExpression(OrExpression object)
      {
        return createOrExpressionAdapter();
      }
      @Override
      public Adapter caseEqualsExpression(EqualsExpression object)
      {
        return createEqualsExpressionAdapter();
      }
      @Override
      public Adapter caseEqualsBooleanExpression(EqualsBooleanExpression object)
      {
        return createEqualsBooleanExpressionAdapter();
      }
      @Override
      public Adapter caseGreaterThanExpression(GreaterThanExpression object)
      {
        return createGreaterThanExpressionAdapter();
      }
      @Override
      public Adapter caseLesserThanExpression(LesserThanExpression object)
      {
        return createLesserThanExpressionAdapter();
      }
      @Override
      public Adapter caseUnaryLogicalExpression(UnaryLogicalExpression object)
      {
        return createUnaryLogicalExpressionAdapter();
      }
      @Override
      public Adapter caseNotLogicalExpression(NotLogicalExpression object)
      {
        return createNotLogicalExpressionAdapter();
      }
      @Override
      public Adapter casePar(Par object)
      {
        return createParAdapter();
      }
      @Override
      public Adapter caseParExpression(ParExpression object)
      {
        return createParExpressionAdapter();
      }
      @Override
      public Adapter caseLoop(Loop object)
      {
        return createLoopAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Domain <em>Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Domain
   * @generated
   */
  public Adapter createDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Include <em>Include</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Include
   * @generated
   */
  public Adapter createIncludeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ContextModel <em>Context Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ContextModel
   * @generated
   */
  public Adapter createContextModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ContextFragment <em>Context Fragment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ContextFragment
   * @generated
   */
  public Adapter createContextFragmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.AttributeValue <em>Attribute Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.AttributeValue
   * @generated
   */
  public Adapter createAttributeValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.FragmentAttribute <em>Fragment Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.FragmentAttribute
   * @generated
   */
  public Adapter createFragmentAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.FEntity <em>FEntity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.FEntity
   * @generated
   */
  public Adapter createFEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Relation <em>Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Relation
   * @generated
   */
  public Adapter createRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.FRelation <em>FRelation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.FRelation
   * @generated
   */
  public Adapter createFRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Scenario <em>Scenario</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Scenario
   * @generated
   */
  public Adapter createScenarioAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ScenarioContent <em>Scenario Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ScenarioContent
   * @generated
   */
  public Adapter createScenarioContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Message <em>Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Message
   * @generated
   */
  public Adapter createMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ResetClock <em>Reset Clock</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ResetClock
   * @generated
   */
  public Adapter createResetClockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ClockConstraint <em>Clock Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ClockConstraint
   * @generated
   */
  public Adapter createClockConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ClockConstraintExpression <em>Clock Constraint Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ClockConstraintExpression
   * @generated
   */
  public Adapter createClockConstraintExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ContextMessage <em>Context Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ContextMessage
   * @generated
   */
  public Adapter createContextMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ContextMessageContent <em>Context Message Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ContextMessageContent
   * @generated
   */
  public Adapter createContextMessageContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.MatchMessage <em>Match Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.MatchMessage
   * @generated
   */
  public Adapter createMatchMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ChangeMessage <em>Change Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ChangeMessage
   * @generated
   */
  public Adapter createChangeMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.AppearMessage <em>Appear Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.AppearMessage
   * @generated
   */
  public Adapter createAppearMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.DisappearMessage <em>Disappear Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.DisappearMessage
   * @generated
   */
  public Adapter createDisappearMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ChangeToMessage <em>Change To Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ChangeToMessage
   * @generated
   */
  public Adapter createChangeToMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ChangeToRelation <em>Change To Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ChangeToRelation
   * @generated
   */
  public Adapter createChangeToRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.AssertionEntity <em>Assertion Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.AssertionEntity
   * @generated
   */
  public Adapter createAssertionEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.AssertionRelation <em>Assertion Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.AssertionRelation
   * @generated
   */
  public Adapter createAssertionRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Params <em>Params</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Params
   * @generated
   */
  public Adapter createParamsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ConstantParams <em>Constant Params</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ConstantParams
   * @generated
   */
  public Adapter createConstantParamsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ParameterConstraint <em>Parameter Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ParameterConstraint
   * @generated
   */
  public Adapter createParameterConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Operator <em>Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Operator
   * @generated
   */
  public Adapter createOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Clock <em>Clock</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Clock
   * @generated
   */
  public Adapter createClockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ObjectType <em>Object Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ObjectType
   * @generated
   */
  public Adapter createObjectTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Object <em>Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Object
   * @generated
   */
  public Adapter createObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Constraint <em>Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Constraint
   * @generated
   */
  public Adapter createConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Alt <em>Alt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Alt
   * @generated
   */
  public Adapter createAltAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.LogicalExpression <em>Logical Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.LogicalExpression
   * @generated
   */
  public Adapter createLogicalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.BinaryLogicalExpression <em>Binary Logical Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.BinaryLogicalExpression
   * @generated
   */
  public Adapter createBinaryLogicalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.AndExpression <em>And Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.AndExpression
   * @generated
   */
  public Adapter createAndExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.OrExpression <em>Or Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.OrExpression
   * @generated
   */
  public Adapter createOrExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.EqualsExpression <em>Equals Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.EqualsExpression
   * @generated
   */
  public Adapter createEqualsExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.EqualsBooleanExpression <em>Equals Boolean Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.EqualsBooleanExpression
   * @generated
   */
  public Adapter createEqualsBooleanExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.GreaterThanExpression <em>Greater Than Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.GreaterThanExpression
   * @generated
   */
  public Adapter createGreaterThanExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.LesserThanExpression <em>Lesser Than Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.LesserThanExpression
   * @generated
   */
  public Adapter createLesserThanExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.UnaryLogicalExpression <em>Unary Logical Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.UnaryLogicalExpression
   * @generated
   */
  public Adapter createUnaryLogicalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.NotLogicalExpression <em>Not Logical Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.NotLogicalExpression
   * @generated
   */
  public Adapter createNotLogicalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Par <em>Par</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Par
   * @generated
   */
  public Adapter createParAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.ParExpression <em>Par Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.ParExpression
   * @generated
   */
  public Adapter createParExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.dipterv.text.minotorDsl.Loop <em>Loop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.dipterv.text.minotorDsl.Loop
   * @generated
   */
  public Adapter createLoopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MinotorDslAdapterFactory

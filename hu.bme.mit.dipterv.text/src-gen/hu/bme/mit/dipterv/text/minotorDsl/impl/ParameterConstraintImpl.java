/**
 * generated by Xtext 2.24.0
 */
package hu.bme.mit.dipterv.text.minotorDsl.impl;

import hu.bme.mit.dipterv.text.minotorDsl.AttributeValue;
import hu.bme.mit.dipterv.text.minotorDsl.MinotorDslPackage;
import hu.bme.mit.dipterv.text.minotorDsl.Operator;
import hu.bme.mit.dipterv.text.minotorDsl.Parameter;
import hu.bme.mit.dipterv.text.minotorDsl.ParameterConstraint;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Parameter Constraint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.ParameterConstraintImpl#getParam <em>Param</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.ParameterConstraintImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.ParameterConstraintImpl#getValue <em>Value</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.ParameterConstraintImpl#getObject <em>Object</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParameterConstraintImpl extends MinimalEObjectImpl.Container implements ParameterConstraint
{
  /**
   * The cached value of the '{@link #getParam() <em>Param</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParam()
   * @generated
   * @ordered
   */
  protected Parameter param;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected EList<Operator> operator;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected EList<AttributeValue> value;

  /**
   * The cached value of the '{@link #getObject() <em>Object</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObject()
   * @generated
   * @ordered
   */
  protected hu.bme.mit.dipterv.text.minotorDsl.Object object;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParameterConstraintImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MinotorDslPackage.Literals.PARAMETER_CONSTRAINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter getParam()
  {
    if (param != null && param.eIsProxy())
    {
      InternalEObject oldParam = (InternalEObject)param;
      param = (Parameter)eResolveProxy(oldParam);
      if (param != oldParam)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MinotorDslPackage.PARAMETER_CONSTRAINT__PARAM, oldParam, param));
      }
    }
    return param;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parameter basicGetParam()
  {
    return param;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParam(Parameter newParam)
  {
    Parameter oldParam = param;
    param = newParam;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinotorDslPackage.PARAMETER_CONSTRAINT__PARAM, oldParam, param));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Operator> getOperator()
  {
    if (operator == null)
    {
      operator = new EObjectContainmentEList<Operator>(Operator.class, this, MinotorDslPackage.PARAMETER_CONSTRAINT__OPERATOR);
    }
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AttributeValue> getValue()
  {
    if (value == null)
    {
      value = new EObjectContainmentEList<AttributeValue>(AttributeValue.class, this, MinotorDslPackage.PARAMETER_CONSTRAINT__VALUE);
    }
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public hu.bme.mit.dipterv.text.minotorDsl.Object getObject()
  {
    if (object != null && object.eIsProxy())
    {
      InternalEObject oldObject = (InternalEObject)object;
      object = (hu.bme.mit.dipterv.text.minotorDsl.Object)eResolveProxy(oldObject);
      if (object != oldObject)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MinotorDslPackage.PARAMETER_CONSTRAINT__OBJECT, oldObject, object));
      }
    }
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public hu.bme.mit.dipterv.text.minotorDsl.Object basicGetObject()
  {
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObject(hu.bme.mit.dipterv.text.minotorDsl.Object newObject)
  {
    hu.bme.mit.dipterv.text.minotorDsl.Object oldObject = object;
    object = newObject;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinotorDslPackage.PARAMETER_CONSTRAINT__OBJECT, oldObject, object));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MinotorDslPackage.PARAMETER_CONSTRAINT__OPERATOR:
        return ((InternalEList<?>)getOperator()).basicRemove(otherEnd, msgs);
      case MinotorDslPackage.PARAMETER_CONSTRAINT__VALUE:
        return ((InternalEList<?>)getValue()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MinotorDslPackage.PARAMETER_CONSTRAINT__PARAM:
        if (resolve) return getParam();
        return basicGetParam();
      case MinotorDslPackage.PARAMETER_CONSTRAINT__OPERATOR:
        return getOperator();
      case MinotorDslPackage.PARAMETER_CONSTRAINT__VALUE:
        return getValue();
      case MinotorDslPackage.PARAMETER_CONSTRAINT__OBJECT:
        if (resolve) return getObject();
        return basicGetObject();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MinotorDslPackage.PARAMETER_CONSTRAINT__PARAM:
        setParam((Parameter)newValue);
        return;
      case MinotorDslPackage.PARAMETER_CONSTRAINT__OPERATOR:
        getOperator().clear();
        getOperator().addAll((Collection<? extends Operator>)newValue);
        return;
      case MinotorDslPackage.PARAMETER_CONSTRAINT__VALUE:
        getValue().clear();
        getValue().addAll((Collection<? extends AttributeValue>)newValue);
        return;
      case MinotorDslPackage.PARAMETER_CONSTRAINT__OBJECT:
        setObject((hu.bme.mit.dipterv.text.minotorDsl.Object)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MinotorDslPackage.PARAMETER_CONSTRAINT__PARAM:
        setParam((Parameter)null);
        return;
      case MinotorDslPackage.PARAMETER_CONSTRAINT__OPERATOR:
        getOperator().clear();
        return;
      case MinotorDslPackage.PARAMETER_CONSTRAINT__VALUE:
        getValue().clear();
        return;
      case MinotorDslPackage.PARAMETER_CONSTRAINT__OBJECT:
        setObject((hu.bme.mit.dipterv.text.minotorDsl.Object)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MinotorDslPackage.PARAMETER_CONSTRAINT__PARAM:
        return param != null;
      case MinotorDslPackage.PARAMETER_CONSTRAINT__OPERATOR:
        return operator != null && !operator.isEmpty();
      case MinotorDslPackage.PARAMETER_CONSTRAINT__VALUE:
        return value != null && !value.isEmpty();
      case MinotorDslPackage.PARAMETER_CONSTRAINT__OBJECT:
        return object != null;
    }
    return super.eIsSet(featureID);
  }

} //ParameterConstraintImpl

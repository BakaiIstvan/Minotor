/**
 * generated by Xtext 2.24.0
 */
package hu.bme.mit.dipterv.text.minotorDsl.impl;

import hu.bme.mit.dipterv.text.minotorDsl.Attribute;
import hu.bme.mit.dipterv.text.minotorDsl.AttributeValue;
import hu.bme.mit.dipterv.text.minotorDsl.ChangeToMessage;
import hu.bme.mit.dipterv.text.minotorDsl.ContextModel;
import hu.bme.mit.dipterv.text.minotorDsl.Entity;
import hu.bme.mit.dipterv.text.minotorDsl.MinotorDslPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Change To Message</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.ChangeToMessageImpl#getContext <em>Context</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.ChangeToMessageImpl#getEntity <em>Entity</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.ChangeToMessageImpl#getAttribute <em>Attribute</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.ChangeToMessageImpl#getChangevalue <em>Changevalue</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ChangeToMessageImpl extends MinimalEObjectImpl.Container implements ChangeToMessage
{
  /**
   * The cached value of the '{@link #getContext() <em>Context</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContext()
   * @generated
   * @ordered
   */
  protected ContextModel context;

  /**
   * The cached value of the '{@link #getEntity() <em>Entity</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntity()
   * @generated
   * @ordered
   */
  protected Entity entity;

  /**
   * The cached value of the '{@link #getAttribute() <em>Attribute</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttribute()
   * @generated
   * @ordered
   */
  protected Attribute attribute;

  /**
   * The cached value of the '{@link #getChangevalue() <em>Changevalue</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChangevalue()
   * @generated
   * @ordered
   */
  protected AttributeValue changevalue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChangeToMessageImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MinotorDslPackage.Literals.CHANGE_TO_MESSAGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextModel getContext()
  {
    if (context != null && context.eIsProxy())
    {
      InternalEObject oldContext = (InternalEObject)context;
      context = (ContextModel)eResolveProxy(oldContext);
      if (context != oldContext)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MinotorDslPackage.CHANGE_TO_MESSAGE__CONTEXT, oldContext, context));
      }
    }
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextModel basicGetContext()
  {
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContext(ContextModel newContext)
  {
    ContextModel oldContext = context;
    context = newContext;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinotorDslPackage.CHANGE_TO_MESSAGE__CONTEXT, oldContext, context));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity getEntity()
  {
    if (entity != null && entity.eIsProxy())
    {
      InternalEObject oldEntity = (InternalEObject)entity;
      entity = (Entity)eResolveProxy(oldEntity);
      if (entity != oldEntity)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MinotorDslPackage.CHANGE_TO_MESSAGE__ENTITY, oldEntity, entity));
      }
    }
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetEntity()
  {
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEntity(Entity newEntity)
  {
    Entity oldEntity = entity;
    entity = newEntity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinotorDslPackage.CHANGE_TO_MESSAGE__ENTITY, oldEntity, entity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute getAttribute()
  {
    if (attribute != null && attribute.eIsProxy())
    {
      InternalEObject oldAttribute = (InternalEObject)attribute;
      attribute = (Attribute)eResolveProxy(oldAttribute);
      if (attribute != oldAttribute)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MinotorDslPackage.CHANGE_TO_MESSAGE__ATTRIBUTE, oldAttribute, attribute));
      }
    }
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute basicGetAttribute()
  {
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttribute(Attribute newAttribute)
  {
    Attribute oldAttribute = attribute;
    attribute = newAttribute;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinotorDslPackage.CHANGE_TO_MESSAGE__ATTRIBUTE, oldAttribute, attribute));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeValue getChangevalue()
  {
    return changevalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetChangevalue(AttributeValue newChangevalue, NotificationChain msgs)
  {
    AttributeValue oldChangevalue = changevalue;
    changevalue = newChangevalue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinotorDslPackage.CHANGE_TO_MESSAGE__CHANGEVALUE, oldChangevalue, newChangevalue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setChangevalue(AttributeValue newChangevalue)
  {
    if (newChangevalue != changevalue)
    {
      NotificationChain msgs = null;
      if (changevalue != null)
        msgs = ((InternalEObject)changevalue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinotorDslPackage.CHANGE_TO_MESSAGE__CHANGEVALUE, null, msgs);
      if (newChangevalue != null)
        msgs = ((InternalEObject)newChangevalue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinotorDslPackage.CHANGE_TO_MESSAGE__CHANGEVALUE, null, msgs);
      msgs = basicSetChangevalue(newChangevalue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinotorDslPackage.CHANGE_TO_MESSAGE__CHANGEVALUE, newChangevalue, newChangevalue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MinotorDslPackage.CHANGE_TO_MESSAGE__CHANGEVALUE:
        return basicSetChangevalue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MinotorDslPackage.CHANGE_TO_MESSAGE__CONTEXT:
        if (resolve) return getContext();
        return basicGetContext();
      case MinotorDslPackage.CHANGE_TO_MESSAGE__ENTITY:
        if (resolve) return getEntity();
        return basicGetEntity();
      case MinotorDslPackage.CHANGE_TO_MESSAGE__ATTRIBUTE:
        if (resolve) return getAttribute();
        return basicGetAttribute();
      case MinotorDslPackage.CHANGE_TO_MESSAGE__CHANGEVALUE:
        return getChangevalue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MinotorDslPackage.CHANGE_TO_MESSAGE__CONTEXT:
        setContext((ContextModel)newValue);
        return;
      case MinotorDslPackage.CHANGE_TO_MESSAGE__ENTITY:
        setEntity((Entity)newValue);
        return;
      case MinotorDslPackage.CHANGE_TO_MESSAGE__ATTRIBUTE:
        setAttribute((Attribute)newValue);
        return;
      case MinotorDslPackage.CHANGE_TO_MESSAGE__CHANGEVALUE:
        setChangevalue((AttributeValue)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MinotorDslPackage.CHANGE_TO_MESSAGE__CONTEXT:
        setContext((ContextModel)null);
        return;
      case MinotorDslPackage.CHANGE_TO_MESSAGE__ENTITY:
        setEntity((Entity)null);
        return;
      case MinotorDslPackage.CHANGE_TO_MESSAGE__ATTRIBUTE:
        setAttribute((Attribute)null);
        return;
      case MinotorDslPackage.CHANGE_TO_MESSAGE__CHANGEVALUE:
        setChangevalue((AttributeValue)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MinotorDslPackage.CHANGE_TO_MESSAGE__CONTEXT:
        return context != null;
      case MinotorDslPackage.CHANGE_TO_MESSAGE__ENTITY:
        return entity != null;
      case MinotorDslPackage.CHANGE_TO_MESSAGE__ATTRIBUTE:
        return attribute != null;
      case MinotorDslPackage.CHANGE_TO_MESSAGE__CHANGEVALUE:
        return changevalue != null;
    }
    return super.eIsSet(featureID);
  }

} //ChangeToMessageImpl

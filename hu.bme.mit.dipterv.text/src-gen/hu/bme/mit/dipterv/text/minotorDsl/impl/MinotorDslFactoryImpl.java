/**
 * generated by Xtext 2.24.0
 */
package hu.bme.mit.dipterv.text.minotorDsl.impl;

import hu.bme.mit.dipterv.text.minotorDsl.Alt;
import hu.bme.mit.dipterv.text.minotorDsl.AndExpression;
import hu.bme.mit.dipterv.text.minotorDsl.AppearMessage;
import hu.bme.mit.dipterv.text.minotorDsl.AssertionEntity;
import hu.bme.mit.dipterv.text.minotorDsl.AssertionRelation;
import hu.bme.mit.dipterv.text.minotorDsl.Attribute;
import hu.bme.mit.dipterv.text.minotorDsl.AttributeValue;
import hu.bme.mit.dipterv.text.minotorDsl.BinaryLogicalExpression;
import hu.bme.mit.dipterv.text.minotorDsl.ChangeMessage;
import hu.bme.mit.dipterv.text.minotorDsl.ChangeToMessage;
import hu.bme.mit.dipterv.text.minotorDsl.ChangeToRelation;
import hu.bme.mit.dipterv.text.minotorDsl.Clock;
import hu.bme.mit.dipterv.text.minotorDsl.ClockConstraint;
import hu.bme.mit.dipterv.text.minotorDsl.ClockConstraintExpression;
import hu.bme.mit.dipterv.text.minotorDsl.ConstantParams;
import hu.bme.mit.dipterv.text.minotorDsl.Constraint;
import hu.bme.mit.dipterv.text.minotorDsl.ContextFragment;
import hu.bme.mit.dipterv.text.minotorDsl.ContextMessage;
import hu.bme.mit.dipterv.text.minotorDsl.ContextMessageContent;
import hu.bme.mit.dipterv.text.minotorDsl.ContextModel;
import hu.bme.mit.dipterv.text.minotorDsl.DisappearMessage;
import hu.bme.mit.dipterv.text.minotorDsl.Domain;
import hu.bme.mit.dipterv.text.minotorDsl.Entity;
import hu.bme.mit.dipterv.text.minotorDsl.EqualsBooleanExpression;
import hu.bme.mit.dipterv.text.minotorDsl.EqualsExpression;
import hu.bme.mit.dipterv.text.minotorDsl.Expression;
import hu.bme.mit.dipterv.text.minotorDsl.FEntity;
import hu.bme.mit.dipterv.text.minotorDsl.FRelation;
import hu.bme.mit.dipterv.text.minotorDsl.FragmentAttribute;
import hu.bme.mit.dipterv.text.minotorDsl.GreaterThanExpression;
import hu.bme.mit.dipterv.text.minotorDsl.Include;
import hu.bme.mit.dipterv.text.minotorDsl.LesserThanExpression;
import hu.bme.mit.dipterv.text.minotorDsl.LogicalExpression;
import hu.bme.mit.dipterv.text.minotorDsl.Loop;
import hu.bme.mit.dipterv.text.minotorDsl.MatchMessage;
import hu.bme.mit.dipterv.text.minotorDsl.Message;
import hu.bme.mit.dipterv.text.minotorDsl.MinotorDslFactory;
import hu.bme.mit.dipterv.text.minotorDsl.MinotorDslPackage;
import hu.bme.mit.dipterv.text.minotorDsl.NotLogicalExpression;
import hu.bme.mit.dipterv.text.minotorDsl.ObjectType;
import hu.bme.mit.dipterv.text.minotorDsl.Operator;
import hu.bme.mit.dipterv.text.minotorDsl.OrExpression;
import hu.bme.mit.dipterv.text.minotorDsl.Par;
import hu.bme.mit.dipterv.text.minotorDsl.ParExpression;
import hu.bme.mit.dipterv.text.minotorDsl.Parameter;
import hu.bme.mit.dipterv.text.minotorDsl.ParameterConstraint;
import hu.bme.mit.dipterv.text.minotorDsl.Params;
import hu.bme.mit.dipterv.text.minotorDsl.Relation;
import hu.bme.mit.dipterv.text.minotorDsl.ResetClock;
import hu.bme.mit.dipterv.text.minotorDsl.Scenario;
import hu.bme.mit.dipterv.text.minotorDsl.ScenarioContent;
import hu.bme.mit.dipterv.text.minotorDsl.Type;
import hu.bme.mit.dipterv.text.minotorDsl.UnaryLogicalExpression;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MinotorDslFactoryImpl extends EFactoryImpl implements MinotorDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MinotorDslFactory init()
  {
    try
    {
      MinotorDslFactory theMinotorDslFactory = (MinotorDslFactory)EPackage.Registry.INSTANCE.getEFactory(MinotorDslPackage.eNS_URI);
      if (theMinotorDslFactory != null)
      {
        return theMinotorDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MinotorDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MinotorDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MinotorDslPackage.DOMAIN: return createDomain();
      case MinotorDslPackage.INCLUDE: return createInclude();
      case MinotorDslPackage.CONTEXT_MODEL: return createContextModel();
      case MinotorDslPackage.CONTEXT_FRAGMENT: return createContextFragment();
      case MinotorDslPackage.ATTRIBUTE: return createAttribute();
      case MinotorDslPackage.ATTRIBUTE_VALUE: return createAttributeValue();
      case MinotorDslPackage.FRAGMENT_ATTRIBUTE: return createFragmentAttribute();
      case MinotorDslPackage.ENTITY: return createEntity();
      case MinotorDslPackage.FENTITY: return createFEntity();
      case MinotorDslPackage.RELATION: return createRelation();
      case MinotorDslPackage.FRELATION: return createFRelation();
      case MinotorDslPackage.SCENARIO: return createScenario();
      case MinotorDslPackage.SCENARIO_CONTENT: return createScenarioContent();
      case MinotorDslPackage.MESSAGE: return createMessage();
      case MinotorDslPackage.RESET_CLOCK: return createResetClock();
      case MinotorDslPackage.CLOCK_CONSTRAINT: return createClockConstraint();
      case MinotorDslPackage.CLOCK_CONSTRAINT_EXPRESSION: return createClockConstraintExpression();
      case MinotorDslPackage.CONTEXT_MESSAGE: return createContextMessage();
      case MinotorDslPackage.CONTEXT_MESSAGE_CONTENT: return createContextMessageContent();
      case MinotorDslPackage.MATCH_MESSAGE: return createMatchMessage();
      case MinotorDslPackage.CHANGE_MESSAGE: return createChangeMessage();
      case MinotorDslPackage.APPEAR_MESSAGE: return createAppearMessage();
      case MinotorDslPackage.DISAPPEAR_MESSAGE: return createDisappearMessage();
      case MinotorDslPackage.CHANGE_TO_MESSAGE: return createChangeToMessage();
      case MinotorDslPackage.CHANGE_TO_RELATION: return createChangeToRelation();
      case MinotorDslPackage.ASSERTION_ENTITY: return createAssertionEntity();
      case MinotorDslPackage.ASSERTION_RELATION: return createAssertionRelation();
      case MinotorDslPackage.PARAMS: return createParams();
      case MinotorDslPackage.CONSTANT_PARAMS: return createConstantParams();
      case MinotorDslPackage.PARAMETER: return createParameter();
      case MinotorDslPackage.PARAMETER_CONSTRAINT: return createParameterConstraint();
      case MinotorDslPackage.OPERATOR: return createOperator();
      case MinotorDslPackage.CLOCK: return createClock();
      case MinotorDslPackage.OBJECT_TYPE: return createObjectType();
      case MinotorDslPackage.OBJECT: return createObject();
      case MinotorDslPackage.CONSTRAINT: return createConstraint();
      case MinotorDslPackage.ALT: return createAlt();
      case MinotorDslPackage.EXPRESSION: return createExpression();
      case MinotorDslPackage.LOGICAL_EXPRESSION: return createLogicalExpression();
      case MinotorDslPackage.BINARY_LOGICAL_EXPRESSION: return createBinaryLogicalExpression();
      case MinotorDslPackage.AND_EXPRESSION: return createAndExpression();
      case MinotorDslPackage.OR_EXPRESSION: return createOrExpression();
      case MinotorDslPackage.EQUALS_EXPRESSION: return createEqualsExpression();
      case MinotorDslPackage.EQUALS_BOOLEAN_EXPRESSION: return createEqualsBooleanExpression();
      case MinotorDslPackage.GREATER_THAN_EXPRESSION: return createGreaterThanExpression();
      case MinotorDslPackage.LESSER_THAN_EXPRESSION: return createLesserThanExpression();
      case MinotorDslPackage.UNARY_LOGICAL_EXPRESSION: return createUnaryLogicalExpression();
      case MinotorDslPackage.NOT_LOGICAL_EXPRESSION: return createNotLogicalExpression();
      case MinotorDslPackage.PAR: return createPar();
      case MinotorDslPackage.PAR_EXPRESSION: return createParExpression();
      case MinotorDslPackage.LOOP: return createLoop();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MinotorDslPackage.TYPE:
        return createTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MinotorDslPackage.TYPE:
        return convertTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Domain createDomain()
  {
    DomainImpl domain = new DomainImpl();
    return domain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Include createInclude()
  {
    IncludeImpl include = new IncludeImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextModel createContextModel()
  {
    ContextModelImpl contextModel = new ContextModelImpl();
    return contextModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextFragment createContextFragment()
  {
    ContextFragmentImpl contextFragment = new ContextFragmentImpl();
    return contextFragment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeValue createAttributeValue()
  {
    AttributeValueImpl attributeValue = new AttributeValueImpl();
    return attributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FragmentAttribute createFragmentAttribute()
  {
    FragmentAttributeImpl fragmentAttribute = new FragmentAttributeImpl();
    return fragmentAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FEntity createFEntity()
  {
    FEntityImpl fEntity = new FEntityImpl();
    return fEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Relation createRelation()
  {
    RelationImpl relation = new RelationImpl();
    return relation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FRelation createFRelation()
  {
    FRelationImpl fRelation = new FRelationImpl();
    return fRelation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scenario createScenario()
  {
    ScenarioImpl scenario = new ScenarioImpl();
    return scenario;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScenarioContent createScenarioContent()
  {
    ScenarioContentImpl scenarioContent = new ScenarioContentImpl();
    return scenarioContent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Message createMessage()
  {
    MessageImpl message = new MessageImpl();
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ResetClock createResetClock()
  {
    ResetClockImpl resetClock = new ResetClockImpl();
    return resetClock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClockConstraint createClockConstraint()
  {
    ClockConstraintImpl clockConstraint = new ClockConstraintImpl();
    return clockConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClockConstraintExpression createClockConstraintExpression()
  {
    ClockConstraintExpressionImpl clockConstraintExpression = new ClockConstraintExpressionImpl();
    return clockConstraintExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextMessage createContextMessage()
  {
    ContextMessageImpl contextMessage = new ContextMessageImpl();
    return contextMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextMessageContent createContextMessageContent()
  {
    ContextMessageContentImpl contextMessageContent = new ContextMessageContentImpl();
    return contextMessageContent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MatchMessage createMatchMessage()
  {
    MatchMessageImpl matchMessage = new MatchMessageImpl();
    return matchMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChangeMessage createChangeMessage()
  {
    ChangeMessageImpl changeMessage = new ChangeMessageImpl();
    return changeMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AppearMessage createAppearMessage()
  {
    AppearMessageImpl appearMessage = new AppearMessageImpl();
    return appearMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DisappearMessage createDisappearMessage()
  {
    DisappearMessageImpl disappearMessage = new DisappearMessageImpl();
    return disappearMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChangeToMessage createChangeToMessage()
  {
    ChangeToMessageImpl changeToMessage = new ChangeToMessageImpl();
    return changeToMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChangeToRelation createChangeToRelation()
  {
    ChangeToRelationImpl changeToRelation = new ChangeToRelationImpl();
    return changeToRelation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertionEntity createAssertionEntity()
  {
    AssertionEntityImpl assertionEntity = new AssertionEntityImpl();
    return assertionEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertionRelation createAssertionRelation()
  {
    AssertionRelationImpl assertionRelation = new AssertionRelationImpl();
    return assertionRelation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Params createParams()
  {
    ParamsImpl params = new ParamsImpl();
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstantParams createConstantParams()
  {
    ConstantParamsImpl constantParams = new ConstantParamsImpl();
    return constantParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterConstraint createParameterConstraint()
  {
    ParameterConstraintImpl parameterConstraint = new ParameterConstraintImpl();
    return parameterConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operator createOperator()
  {
    OperatorImpl operator = new OperatorImpl();
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Clock createClock()
  {
    ClockImpl clock = new ClockImpl();
    return clock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectType createObjectType()
  {
    ObjectTypeImpl objectType = new ObjectTypeImpl();
    return objectType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public hu.bme.mit.dipterv.text.minotorDsl.Object createObject()
  {
    ObjectImpl object = new ObjectImpl();
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Alt createAlt()
  {
    AltImpl alt = new AltImpl();
    return alt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalExpression createLogicalExpression()
  {
    LogicalExpressionImpl logicalExpression = new LogicalExpressionImpl();
    return logicalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinaryLogicalExpression createBinaryLogicalExpression()
  {
    BinaryLogicalExpressionImpl binaryLogicalExpression = new BinaryLogicalExpressionImpl();
    return binaryLogicalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndExpression createAndExpression()
  {
    AndExpressionImpl andExpression = new AndExpressionImpl();
    return andExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrExpression createOrExpression()
  {
    OrExpressionImpl orExpression = new OrExpressionImpl();
    return orExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqualsExpression createEqualsExpression()
  {
    EqualsExpressionImpl equalsExpression = new EqualsExpressionImpl();
    return equalsExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqualsBooleanExpression createEqualsBooleanExpression()
  {
    EqualsBooleanExpressionImpl equalsBooleanExpression = new EqualsBooleanExpressionImpl();
    return equalsBooleanExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterThanExpression createGreaterThanExpression()
  {
    GreaterThanExpressionImpl greaterThanExpression = new GreaterThanExpressionImpl();
    return greaterThanExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LesserThanExpression createLesserThanExpression()
  {
    LesserThanExpressionImpl lesserThanExpression = new LesserThanExpressionImpl();
    return lesserThanExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryLogicalExpression createUnaryLogicalExpression()
  {
    UnaryLogicalExpressionImpl unaryLogicalExpression = new UnaryLogicalExpressionImpl();
    return unaryLogicalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotLogicalExpression createNotLogicalExpression()
  {
    NotLogicalExpressionImpl notLogicalExpression = new NotLogicalExpressionImpl();
    return notLogicalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Par createPar()
  {
    ParImpl par = new ParImpl();
    return par;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParExpression createParExpression()
  {
    ParExpressionImpl parExpression = new ParExpressionImpl();
    return parExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Loop createLoop()
  {
    LoopImpl loop = new LoopImpl();
    return loop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createTypeFromString(EDataType eDataType, String initialValue)
  {
    Type result = Type.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MinotorDslPackage getMinotorDslPackage()
  {
    return (MinotorDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MinotorDslPackage getPackage()
  {
    return MinotorDslPackage.eINSTANCE;
  }

} //MinotorDslFactoryImpl

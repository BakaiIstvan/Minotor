/**
 * generated by Xtext 2.24.0
 */
package hu.bme.mit.dipterv.text.minotorDsl.impl;

import hu.bme.mit.dipterv.text.minotorDsl.Clock;
import hu.bme.mit.dipterv.text.minotorDsl.Constraint;
import hu.bme.mit.dipterv.text.minotorDsl.ContextFragment;
import hu.bme.mit.dipterv.text.minotorDsl.ContextModel;
import hu.bme.mit.dipterv.text.minotorDsl.Domain;
import hu.bme.mit.dipterv.text.minotorDsl.Include;
import hu.bme.mit.dipterv.text.minotorDsl.MinotorDslPackage;
import hu.bme.mit.dipterv.text.minotorDsl.Parameter;
import hu.bme.mit.dipterv.text.minotorDsl.Scenario;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Domain</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.DomainImpl#getSpecification <em>Specification</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.DomainImpl#getName <em>Name</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.DomainImpl#getIncludes <em>Includes</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.DomainImpl#getContextmodels <em>Contextmodels</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.DomainImpl#getContextfragments <em>Contextfragments</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.DomainImpl#getObjects <em>Objects</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.DomainImpl#getParameters <em>Parameters</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.DomainImpl#getClocks <em>Clocks</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.DomainImpl#getConstraints <em>Constraints</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.DomainImpl#getScenarios <em>Scenarios</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DomainImpl extends MinimalEObjectImpl.Container implements Domain
{
  /**
   * The default value of the '{@link #getSpecification() <em>Specification</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecification()
   * @generated
   * @ordered
   */
  protected static final String SPECIFICATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSpecification() <em>Specification</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecification()
   * @generated
   * @ordered
   */
  protected String specification = SPECIFICATION_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getIncludes() <em>Includes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludes()
   * @generated
   * @ordered
   */
  protected EList<Include> includes;

  /**
   * The cached value of the '{@link #getContextmodels() <em>Contextmodels</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContextmodels()
   * @generated
   * @ordered
   */
  protected EList<ContextModel> contextmodels;

  /**
   * The cached value of the '{@link #getContextfragments() <em>Contextfragments</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContextfragments()
   * @generated
   * @ordered
   */
  protected EList<ContextFragment> contextfragments;

  /**
   * The cached value of the '{@link #getObjects() <em>Objects</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjects()
   * @generated
   * @ordered
   */
  protected EList<hu.bme.mit.dipterv.text.minotorDsl.Object> objects;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected EList<Parameter> parameters;

  /**
   * The cached value of the '{@link #getClocks() <em>Clocks</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClocks()
   * @generated
   * @ordered
   */
  protected EList<Clock> clocks;

  /**
   * The cached value of the '{@link #getConstraints() <em>Constraints</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraints()
   * @generated
   * @ordered
   */
  protected EList<Constraint> constraints;

  /**
   * The cached value of the '{@link #getScenarios() <em>Scenarios</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScenarios()
   * @generated
   * @ordered
   */
  protected EList<Scenario> scenarios;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MinotorDslPackage.Literals.DOMAIN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSpecification()
  {
    return specification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSpecification(String newSpecification)
  {
    String oldSpecification = specification;
    specification = newSpecification;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinotorDslPackage.DOMAIN__SPECIFICATION, oldSpecification, specification));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinotorDslPackage.DOMAIN__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Include> getIncludes()
  {
    if (includes == null)
    {
      includes = new EObjectContainmentEList<Include>(Include.class, this, MinotorDslPackage.DOMAIN__INCLUDES);
    }
    return includes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ContextModel> getContextmodels()
  {
    if (contextmodels == null)
    {
      contextmodels = new EObjectContainmentEList<ContextModel>(ContextModel.class, this, MinotorDslPackage.DOMAIN__CONTEXTMODELS);
    }
    return contextmodels;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ContextFragment> getContextfragments()
  {
    if (contextfragments == null)
    {
      contextfragments = new EObjectContainmentEList<ContextFragment>(ContextFragment.class, this, MinotorDslPackage.DOMAIN__CONTEXTFRAGMENTS);
    }
    return contextfragments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<hu.bme.mit.dipterv.text.minotorDsl.Object> getObjects()
  {
    if (objects == null)
    {
      objects = new EObjectContainmentEList<hu.bme.mit.dipterv.text.minotorDsl.Object>(hu.bme.mit.dipterv.text.minotorDsl.Object.class, this, MinotorDslPackage.DOMAIN__OBJECTS);
    }
    return objects;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Parameter> getParameters()
  {
    if (parameters == null)
    {
      parameters = new EObjectContainmentEList<Parameter>(Parameter.class, this, MinotorDslPackage.DOMAIN__PARAMETERS);
    }
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Clock> getClocks()
  {
    if (clocks == null)
    {
      clocks = new EObjectContainmentEList<Clock>(Clock.class, this, MinotorDslPackage.DOMAIN__CLOCKS);
    }
    return clocks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Constraint> getConstraints()
  {
    if (constraints == null)
    {
      constraints = new EObjectContainmentEList<Constraint>(Constraint.class, this, MinotorDslPackage.DOMAIN__CONSTRAINTS);
    }
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Scenario> getScenarios()
  {
    if (scenarios == null)
    {
      scenarios = new EObjectContainmentEList<Scenario>(Scenario.class, this, MinotorDslPackage.DOMAIN__SCENARIOS);
    }
    return scenarios;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MinotorDslPackage.DOMAIN__INCLUDES:
        return ((InternalEList<?>)getIncludes()).basicRemove(otherEnd, msgs);
      case MinotorDslPackage.DOMAIN__CONTEXTMODELS:
        return ((InternalEList<?>)getContextmodels()).basicRemove(otherEnd, msgs);
      case MinotorDslPackage.DOMAIN__CONTEXTFRAGMENTS:
        return ((InternalEList<?>)getContextfragments()).basicRemove(otherEnd, msgs);
      case MinotorDslPackage.DOMAIN__OBJECTS:
        return ((InternalEList<?>)getObjects()).basicRemove(otherEnd, msgs);
      case MinotorDslPackage.DOMAIN__PARAMETERS:
        return ((InternalEList<?>)getParameters()).basicRemove(otherEnd, msgs);
      case MinotorDslPackage.DOMAIN__CLOCKS:
        return ((InternalEList<?>)getClocks()).basicRemove(otherEnd, msgs);
      case MinotorDslPackage.DOMAIN__CONSTRAINTS:
        return ((InternalEList<?>)getConstraints()).basicRemove(otherEnd, msgs);
      case MinotorDslPackage.DOMAIN__SCENARIOS:
        return ((InternalEList<?>)getScenarios()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MinotorDslPackage.DOMAIN__SPECIFICATION:
        return getSpecification();
      case MinotorDslPackage.DOMAIN__NAME:
        return getName();
      case MinotorDslPackage.DOMAIN__INCLUDES:
        return getIncludes();
      case MinotorDslPackage.DOMAIN__CONTEXTMODELS:
        return getContextmodels();
      case MinotorDslPackage.DOMAIN__CONTEXTFRAGMENTS:
        return getContextfragments();
      case MinotorDslPackage.DOMAIN__OBJECTS:
        return getObjects();
      case MinotorDslPackage.DOMAIN__PARAMETERS:
        return getParameters();
      case MinotorDslPackage.DOMAIN__CLOCKS:
        return getClocks();
      case MinotorDslPackage.DOMAIN__CONSTRAINTS:
        return getConstraints();
      case MinotorDslPackage.DOMAIN__SCENARIOS:
        return getScenarios();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MinotorDslPackage.DOMAIN__SPECIFICATION:
        setSpecification((String)newValue);
        return;
      case MinotorDslPackage.DOMAIN__NAME:
        setName((String)newValue);
        return;
      case MinotorDslPackage.DOMAIN__INCLUDES:
        getIncludes().clear();
        getIncludes().addAll((Collection<? extends Include>)newValue);
        return;
      case MinotorDslPackage.DOMAIN__CONTEXTMODELS:
        getContextmodels().clear();
        getContextmodels().addAll((Collection<? extends ContextModel>)newValue);
        return;
      case MinotorDslPackage.DOMAIN__CONTEXTFRAGMENTS:
        getContextfragments().clear();
        getContextfragments().addAll((Collection<? extends ContextFragment>)newValue);
        return;
      case MinotorDslPackage.DOMAIN__OBJECTS:
        getObjects().clear();
        getObjects().addAll((Collection<? extends hu.bme.mit.dipterv.text.minotorDsl.Object>)newValue);
        return;
      case MinotorDslPackage.DOMAIN__PARAMETERS:
        getParameters().clear();
        getParameters().addAll((Collection<? extends Parameter>)newValue);
        return;
      case MinotorDslPackage.DOMAIN__CLOCKS:
        getClocks().clear();
        getClocks().addAll((Collection<? extends Clock>)newValue);
        return;
      case MinotorDslPackage.DOMAIN__CONSTRAINTS:
        getConstraints().clear();
        getConstraints().addAll((Collection<? extends Constraint>)newValue);
        return;
      case MinotorDslPackage.DOMAIN__SCENARIOS:
        getScenarios().clear();
        getScenarios().addAll((Collection<? extends Scenario>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MinotorDslPackage.DOMAIN__SPECIFICATION:
        setSpecification(SPECIFICATION_EDEFAULT);
        return;
      case MinotorDslPackage.DOMAIN__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MinotorDslPackage.DOMAIN__INCLUDES:
        getIncludes().clear();
        return;
      case MinotorDslPackage.DOMAIN__CONTEXTMODELS:
        getContextmodels().clear();
        return;
      case MinotorDslPackage.DOMAIN__CONTEXTFRAGMENTS:
        getContextfragments().clear();
        return;
      case MinotorDslPackage.DOMAIN__OBJECTS:
        getObjects().clear();
        return;
      case MinotorDslPackage.DOMAIN__PARAMETERS:
        getParameters().clear();
        return;
      case MinotorDslPackage.DOMAIN__CLOCKS:
        getClocks().clear();
        return;
      case MinotorDslPackage.DOMAIN__CONSTRAINTS:
        getConstraints().clear();
        return;
      case MinotorDslPackage.DOMAIN__SCENARIOS:
        getScenarios().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MinotorDslPackage.DOMAIN__SPECIFICATION:
        return SPECIFICATION_EDEFAULT == null ? specification != null : !SPECIFICATION_EDEFAULT.equals(specification);
      case MinotorDslPackage.DOMAIN__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MinotorDslPackage.DOMAIN__INCLUDES:
        return includes != null && !includes.isEmpty();
      case MinotorDslPackage.DOMAIN__CONTEXTMODELS:
        return contextmodels != null && !contextmodels.isEmpty();
      case MinotorDslPackage.DOMAIN__CONTEXTFRAGMENTS:
        return contextfragments != null && !contextfragments.isEmpty();
      case MinotorDslPackage.DOMAIN__OBJECTS:
        return objects != null && !objects.isEmpty();
      case MinotorDslPackage.DOMAIN__PARAMETERS:
        return parameters != null && !parameters.isEmpty();
      case MinotorDslPackage.DOMAIN__CLOCKS:
        return clocks != null && !clocks.isEmpty();
      case MinotorDslPackage.DOMAIN__CONSTRAINTS:
        return constraints != null && !constraints.isEmpty();
      case MinotorDslPackage.DOMAIN__SCENARIOS:
        return scenarios != null && !scenarios.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (specification: ");
    result.append(specification);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //DomainImpl

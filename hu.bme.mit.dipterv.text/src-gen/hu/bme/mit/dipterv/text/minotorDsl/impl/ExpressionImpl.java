/**
 * generated by Xtext 2.24.0
 */
package hu.bme.mit.dipterv.text.minotorDsl.impl;

import hu.bme.mit.dipterv.text.minotorDsl.Expression;
import hu.bme.mit.dipterv.text.minotorDsl.LogicalExpression;
import hu.bme.mit.dipterv.text.minotorDsl.Message;
import hu.bme.mit.dipterv.text.minotorDsl.MinotorDslPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.ExpressionImpl#getAltCondition <em>Alt Condition</em>}</li>
 *   <li>{@link hu.bme.mit.dipterv.text.minotorDsl.impl.ExpressionImpl#getMessages <em>Messages</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends MinimalEObjectImpl.Container implements Expression
{
  /**
   * The cached value of the '{@link #getAltCondition() <em>Alt Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAltCondition()
   * @generated
   * @ordered
   */
  protected LogicalExpression altCondition;

  /**
   * The cached value of the '{@link #getMessages() <em>Messages</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessages()
   * @generated
   * @ordered
   */
  protected EList<Message> messages;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MinotorDslPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalExpression getAltCondition()
  {
    return altCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAltCondition(LogicalExpression newAltCondition, NotificationChain msgs)
  {
    LogicalExpression oldAltCondition = altCondition;
    altCondition = newAltCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinotorDslPackage.EXPRESSION__ALT_CONDITION, oldAltCondition, newAltCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAltCondition(LogicalExpression newAltCondition)
  {
    if (newAltCondition != altCondition)
    {
      NotificationChain msgs = null;
      if (altCondition != null)
        msgs = ((InternalEObject)altCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinotorDslPackage.EXPRESSION__ALT_CONDITION, null, msgs);
      if (newAltCondition != null)
        msgs = ((InternalEObject)newAltCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinotorDslPackage.EXPRESSION__ALT_CONDITION, null, msgs);
      msgs = basicSetAltCondition(newAltCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinotorDslPackage.EXPRESSION__ALT_CONDITION, newAltCondition, newAltCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Message> getMessages()
  {
    if (messages == null)
    {
      messages = new EObjectContainmentEList<Message>(Message.class, this, MinotorDslPackage.EXPRESSION__MESSAGES);
    }
    return messages;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MinotorDslPackage.EXPRESSION__ALT_CONDITION:
        return basicSetAltCondition(null, msgs);
      case MinotorDslPackage.EXPRESSION__MESSAGES:
        return ((InternalEList<?>)getMessages()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MinotorDslPackage.EXPRESSION__ALT_CONDITION:
        return getAltCondition();
      case MinotorDslPackage.EXPRESSION__MESSAGES:
        return getMessages();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MinotorDslPackage.EXPRESSION__ALT_CONDITION:
        setAltCondition((LogicalExpression)newValue);
        return;
      case MinotorDslPackage.EXPRESSION__MESSAGES:
        getMessages().clear();
        getMessages().addAll((Collection<? extends Message>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MinotorDslPackage.EXPRESSION__ALT_CONDITION:
        setAltCondition((LogicalExpression)null);
        return;
      case MinotorDslPackage.EXPRESSION__MESSAGES:
        getMessages().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MinotorDslPackage.EXPRESSION__ALT_CONDITION:
        return altCondition != null;
      case MinotorDslPackage.EXPRESSION__MESSAGES:
        return messages != null && !messages.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ExpressionImpl
